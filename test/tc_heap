#!/usr/bin/env ruby
require 'test/unit'
require 'korekto/heap'

class TestHep < Test::Unit::TestCase
  def test_heap3
    heap = Korekto::Heap.new(3)
    a = []

    heap.combos{|s1,s2|a<<"#{s1};#{s2}"}
    assert a.empty?

    heap.add 'A'
    heap.combos{|s1,s2|a<<"#{s1};#{s2}"}
    assert a.empty?

    heap.add 'B'
    heap.combos{|s1,s2|a<<"#{s1};#{s2}"}
    assert_equal 2, a.length
    assert_equal 'B;A', a[0]
    assert_equal 'A;B', a[1]

    a.clear
    heap.add 'C'
    heap.combos{|s1,s2|a<<"#{s1};#{s2}"}
    assert_equal 6, a.length
    assert_equal 'C;B', a[0]
    assert_equal 'B;C', a[1]
    assert_equal 'C;A', a[2]
    assert_equal 'A;C', a[3]
    assert_equal 'B;A', a[4]
    assert_equal 'A;B', a[5]

    a.clear
    heap.add 'D'
    heap.combos{|s1,s2|a<<"#{s1};#{s2}"}
    assert_equal 6, a.length
    # Note that with a heap of 3, "A" is gone.
    assert_equal 'D;C', a[0]
    assert_equal 'C;D', a[1]
    assert_equal 'D;B', a[2]
    assert_equal 'B;D', a[3]
    assert_equal 'C;B', a[4]
    assert_equal 'B;C', a[5]
  end

  def test_heap4
    a,heap = [],Korekto::Heap.new(4)
    %w[A B C D].each{heap.add _1}
    heap.combos{|x,y| a<<"#{x};#{y}"}
    assert_equal 12, a.length
    assert_equal a, a.uniq
    assert_equal 'D;C', a.first
    assert_equal 'A;B', a.last
  end

  def test_heap13
    a,heap = [],Korekto::Heap.new(13)
    %w[1 2 3 4 5 6 7 8 9 10 11 12 13].each{heap.add _1}
    heap.combos{|x,y| a<<"#{x};#{y}"}
    assert_equal 156, a.length
    assert_equal a, a.uniq
    assert_equal '13;12', a.first
    assert_equal '1;2', a.last
  end
end
